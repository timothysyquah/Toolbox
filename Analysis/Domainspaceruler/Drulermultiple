#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar  6 11:22:13 2020

@author: tquah
"""

import numpy as np
from scipy.optimize import curve_fit
from scipy.stats import linregress
import matplotlib.pyplot as plt
import glob
from natsort import natsorted, ns
import os 
def powerlawscale(x,a,b):
    return a*x**b
import_path = '/home/tquah/IMPORT_BRAID/2020-03-05/LD_data.dat/ChainStats/**/*.dat'
export_path = '/home/tquah/Presentations/2020-03-06/'
name = ['linear_DvsL1.pdf','linear_DvsL2.pdf','linear_DvsL3.pdf']
name_1 = ['linear_DvsLdiff1.pdf','linear_DvsLdiff2.pdf','linear_DvsLdiff3.pdf']

data = []


stats = []
chi = []
for file in glob.iglob(import_path,recursive=True):
    data.append(np.loadtxt(file))
    
    
    groups = file.split('/')
    specs = groups[-1].split('_')
    stats.append(specs[1])
    chi.append(specs[3])


colors = ['r','b','k']
chiunique = list(set(chi))
chiunique.sort()
statsunique = list(set(stats))
statsunique.sort()

data_storage = dict()

for i in range(0,len(chiunique),1):
    plt.figure(i)
    plt.figure(len(chi)+i)
    data_storage[chiunique[i]] = dict()


for i in range(0,len(data),1):
    if data[i][0,1]>80 and data[i][0,1]<100:
        data[i][0,1] = data[i][0,1]/2
    popt,pcov = curve_fit(powerlawscale,data[i][3:6,0],data[i][3:6,1])
    for j in range(0,len(chiunique),1):
        if float(chi[i])==float(chiunique[j]):
            for k in range(0,len(statsunique),1):

                if stats[i] == statsunique[k]:
                    # data_storage[chiunique[j]][k] = dict()
                    data_storage[chiunique[j]][k]= data[i]
                    # data_storage[chiunique[j]][k][1] = statsunique[k]

                    plt.figure(j)
                    m,b,r,p,se = linregress(np.log10(data[i][-10:,0]),np.log10(data[i][-10:,1]))
                    plt.plot(np.log10(data[i][:,0]),np.log10(data[i][:,1]),c=colors[k],label= stats[i]+' $\chi = %0.1f$'%float(chi[j]))
    
    print(m)
    print(b)
    print(r**2)
#    print(popt)
for i in range(0,len(chiunique),1):
    plt.figure(i)
    plt.legend()
    plt.xlabel('$\log_{10}(N)$')
    plt.ylabel('$\log_{10}(D_0\sqrt{6}/b_{ref})$')
    epath =os.path.join(export_path,name[i])
    plt.savefig(epath,dpi = 300)

for i in range(0,len(chiunique),1):
    plt.figure(len(chiunique)+i)

    lencheck = []
    for j in range(0,len(data_storage[chiunique[i]]),1):
        lencheck.append(len(data_storage[chiunique[i]][j][:,0]))
    for j in range(1,len(data_storage[chiunique[i]]),1):
        plt.plot(data_storage[chiunique[i]][j][:min(lencheck),0],\
                 abs(data_storage[chiunique[i]][j][:min(lencheck),1]-\
                     data_storage[chiunique[i]][0][:min(lencheck),1]),label= statsunique[j]+' $\chi = %0.1f$'%float(chiunique[i]))
for i in range(0,len(chiunique),1):
    plt.figure(len(chiunique)+i)
    plt.legend()
    plt.xlabel('$\log_{10}(N)$')
    plt.ylabel('$\log_{10}(D_{0,{i}}\sqrt{6}/b_{ref})$-$\log_{10}(D_{0,CGC}\sqrt{6}/b_{ref})$')
    epath =os.path.join(export_path,name_1[i])
    plt.savefig(epath,dpi = 300)
